package leetCode.cn.hdu;

import java.util.Arrays;

public class ClimbingStairs {

	public static void main(String[] args) {
		int[] cost = new int[] { 1, 100, 1, 1, 1, 100, 1, 1, 100, 1 };
//		 int[] cost = new int[] { 10, 15, 20 };
//		 int[] cost = new int[] { 0, 0, 1, 1 };
		int minCount = minCostClimbingStairs1(cost);
		System.out.println(minCount);
	}

	//动态规划
	private static int minCostClimbingStairs1(int[] cost) {
		if (cost.length == 0)
			return 0;
		if (cost.length == 1)
			return cost[0];
		if (cost.length == 2)
			return Math.min(cost[0], cost[1]);
		int[] dp = new int[cost.length + 1];
		dp[1] = cost[0];
		dp[2] = cost[1];
		for(int i = 3; i<=cost.length; i++){
			dp[i] = Math.min(cost[i-1] + dp[i-1], cost[i-1] + dp[i-2]);
		}
		return Math.min(dp[cost.length], dp[cost.length-1]);
	}
	
	private static int minCostClimbingStairs(int[] cost) {
		if (cost.length == 0)
			return 0;
		if (cost.length == 1)
			return cost[0];
		if (cost.length == 2)
			return Math.min(cost[0], cost[1]);
		int index = cost.length;
		int[] memo = new int[index + 1];
		Arrays.fill(memo, -1);
		int minCount = help(cost, index, memo);
		System.out.println(Arrays.toString(memo));
		return minCount;
	}

	// 带备忘录
	private static int help(int[] cost, int index, int[] memo) {
		if (index == 0)
			return cost[0];
		if (index == 1)
			return cost[1];
		if (memo[index] != -1)
			return memo[index];
		if (index == cost.length) {
			memo[index] = Math
					.min(help(cost, index - 1, memo), help(cost, index - 2, memo));
			return memo[index];
		} else {
			memo[index] = Math.min(cost[index] + help(cost, index - 1, memo),
					cost[index] + help(cost, index - 2, memo));
			return memo[index];
		}
	}

	// 暴力解法
	private static int help(int[] cost, int index) {
		if (index == 0)
			return cost[0];
		if (index == 1)
			return cost[1];
		if (index == cost.length) {
			int minCount = Math.min(help(cost, index - 1),
					help(cost, index - 2));
			return minCount;
		} else {
			int minCount = Math.min(cost[index] + help(cost, index - 1),
					cost[index] + help(cost, index - 2));
			return minCount;
		}
	}
}
