package leetCode.cn.hdu;

public class Rob2 {
	public static void main(String[] args) {
		int[] nums = new int[] { 2, 1, 2, 5 };
		int len = nums.length;
		int[] memo = new int[len + 1];
		int maxMoney = rob(nums);
		int maxMoney1 = rob1(nums);
		int maxMoney2 = rob2(nums);
		System.out.println(maxMoney);
		System.out.println(maxMoney1);
		System.out.println(maxMoney2);
	}

	// 动态规划
	private static int rob2(int[] nums) {
		int[] dp1 = new int[nums.length + 1];
		int[] dp2 = new int[nums.length + 1];
		dp1[1] = nums[0];
		dp1[2] = Math.max(nums[1], nums[0]);
		for (int i = 3; i < nums.length; i++) {
			dp1[i] = Math.max(nums[i - 1] + dp1[i - 2], dp1[i - 1]);
		}
		dp2[2] = nums[1];
		dp2[3] = Math.max(nums[1], nums[2]);
		for (int i = 4; i <= nums.length; i++) {
			dp2[i] = Math.max(nums[i - 1] + dp2[i - 2], dp2[i - 1]);
		}
		return Math.max(dp1[nums.length - 1], dp2[nums.length]);
	}

	// 动态规划
	private static int rob2(int[] nums, int len) {
		int[] dp = new int[len + 1];
		dp[1] = nums[0];
		dp[2] = Math.max(nums[1], nums[0]);
		for (int i = 3; i <= len; i++) {
			dp[i] = Math.max(nums[i - 1] + dp[i - 2], dp[i - 1]);
		}
		return dp[len];
	}
	
	// 带备忘录
	private static int rob1(int[] nums) {
		if(nums.length == 0)
            return 0;
        if(nums.length == 1)
            return nums[0];
        if(nums.length == 2)
            return Math.max(nums[0], nums[1]);
		int[] memo1 = new int[nums.length + 1];
		int[] memo2 = new int[nums.length + 1];
		int start1 = 1;
		int start2 = 2;
		int end1 = nums.length - 1;
		int end2 = nums.length;
		int m1 = help(nums, start1, end1, memo1);
		int m2 = help(nums, start2, end2, memo2);
		int m = Math.max(m1, m2);
		return m;
	}

	private static int help(int[] nums, int start, int end, int[] memo) {
		if (start == 1) {
			if (end == 1)
				return nums[0];
			if (end == 2)
				return Math.max(nums[0], nums[1]);
		}
		if (start == 2) {
			if (end == 2)
				return nums[1];
			if (end == 3)
				return Math.max(nums[1], nums[2]);
		}
		if(memo[end] != 0)
			return memo[end];
		memo[end] = Math.max(help(nums, start, end - 2, memo) + nums[end - 1],
				help(nums, start, end - 1, memo));
		return memo[end];
	}

	// 暴力解法
	private static int rob(int[] nums) {
		if(nums.length == 0)
            return 0;
        if(nums.length == 1)
            return nums[0];
        if(nums.length == 2)
            return Math.max(nums[0], nums[1]);
		int start1 = 1;
		int start2 = 2;
		int end1 = nums.length - 1;
		int end2 = nums.length;
		int m1 = help(nums, start1, end1);
		int m2 = help(nums, start2, end2);
		int m = Math.max(m1, m2);
		return m;
	}

	private static int help(int[] nums, int start, int end) {
		if (start == 1) {
			if (end == 1)
				return nums[0];
			if (end == 2)
				return Math.max(nums[0], nums[1]);
		}
		if (start == 2) {
			if (end == 2)
				return nums[1];
			if (end == 3)
				return Math.max(nums[1], nums[2]);
		}
		int m = Math.max(help(nums, start, end - 2) + nums[end - 1],
				help(nums, start, end - 1));
		return m;
	}
}
