/**
*爱丽丝和鲍勃一起玩游戏，他们轮流行动。爱丽丝先手开局。
*最初，黑板上有一个数字 N 。在每个玩家的回合，玩家需要执行以下操作：
*选出任一 x，满足 0 < x < N 且 N % x == 0 。
*用 N - x 替换黑板上的数字 N 。
*只有在爱丽丝在游戏中取得胜利时才返回 True，否则返回 false。假设两个玩家都以最佳状态参与游戏。
*来源：力扣（LeetCode）
*/
class Solution {
    public boolean divisorGame(int N) {
        //如果初始数字N小于3，直接得结果，1和3爱丽丝输，2爱丽丝赢
        if(N == 1 || N == 3)
            return false;
        if(N == 2)
            return true;
        //设置动态规划数组dp
        boolean[] dp = new boolean[N + 1];
        //list将存放4到N的质数(包括1，如若数为4，将在list中存入1和2)
		List<Integer> list = new ArrayList<>();
		dp[1] = false;
		dp[2] = true;
		dp[3] = false;
        //循环将决定4之后所有的数在dp[i]中存的值
		for (int i = 4; i <= N; i++) {
            //求出i的素数
			for (int j = 1; j < i; j++) {
				if (i % j == 0) {
					list.add(j);
				}
			}
            //遍历list，查看dp的索引为i-num的值，如果存在dp[i - num] == false，那么dp[i] == true,且结束循环，否则dp[i] == false
			for (Integer num : list) {
				if(dp[i - num] == true)
					dp[i] = false;
				else{
					dp[i] = true;
					break;
				}
			}
			list.clear();
		}
		return dp[N];
    }
}
