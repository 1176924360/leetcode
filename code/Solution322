package leetCode.cn.hdu;

import java.util.Arrays;

public class CoinChange {

	public static void main(String[] args) {
		int[] coins = new int[] { 1, 2, 5 };
		int amount = 11;
		int count = isMin2(coins, amount);
		int count2 = isMin4(coins, amount);
		int[] memo = new int[amount + 1];
		Arrays.fill(memo, -2);
		int count1 = isMin3(coins, amount, memo);
		System.out.println(count1);
		System.out.println(count2);
	}

	//动态规划
	private static int isMin4(int[] coins, int amount) {
		int[] dp = new int[amount + 1];
		Arrays.fill(dp, amount +1);
		dp[0] = 0;
		for(int i=1; i<=amount; i++){
			for (int coin : coins) {
				if(i < coin)
					continue;
				dp[i] = Math.min(dp[i], dp[i-coin] + 1);
			}
		}
		return dp[amount] > amount ? -1 : dp[amount];
	}


	// 带备忘录的
	private static int isMin3(int[] coins, int amount, int[] memo) {
		if (amount == 0)
			return 0;
		if (memo[amount] != -2)
			return memo[amount];
		int ans = Integer.MAX_VALUE;
		for (int coin : coins) {
			if (amount - coin < 0)
				continue;
			int sub = isMin3(coins, amount - coin, memo);
			if (sub == -1)
				continue;
			ans = Math.min(ans, sub + 1);
		}
		memo[amount] = (ans == Integer.MAX_VALUE) ? -1 : ans;
		return memo[amount];
	}

	// 暴力法
	private static int isMin2(int[] coins, int amount) {
		if (amount == 0)
			return 0;
		int ans = Integer.MAX_VALUE;
		for (int i : coins) {
			if (amount - i < 0)
				continue;
			int sub = isMin2(coins, amount - i);
			if (sub == -1)
				continue;
			ans = Math.min(ans, sub + 1);
		}
		return ans == Integer.MAX_VALUE ? -1 : ans;
	}

	private static int isMin(int[] coins, int amount) {
		if (amount == 0)
			return 0;
		int ans = Integer.MAX_VALUE;
		for (int i : coins) {
			if (amount - i < 0)
				continue;
			int sub = isMin(coins, amount - i);
			if (sub == -1)
				continue;
			ans = Math.min(ans, sub + 1);
		}
		return ans == Integer.MAX_VALUE ? -1 : ans;
	}
}
